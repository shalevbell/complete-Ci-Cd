name: MAIN_CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  main_tests:
    runs-on: ubuntu-latest

    env:
      REQ_FILE: app/requirements.txt

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: Install dependencies with pip
      run: |
        echo "Requirements to be downloaded:"
        cat $REQ_FILE
        pip install -r $REQ_FILE

    - name: Run tests
      run: |
        python -m unittest discover -s tests

  build_push_docker:
    runs-on: ubuntu-latest
    needs: main_tests
    if: success()
    
    env:
      IMAGE_NAME: shalevbell/weatherapp

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get current image tag
        run: |
          if ! HUB_RESPONSE=$(curl -s "https://registry.hub.docker.com/v2/repositories/${IMAGE_NAME}/tags"); then
            echo "Error: Failed to retrieve current version."
            exit 1
          fi
          TAG=$(echo $HUB_RESPONSE | jq -r '.results | map(.name) | sort | last')

          echo "Current tag: $TAG"
          echo "CurrentTag=$TAG" >> $GITHUB_ENV

          if [[ -z "$TAG" ]]; then
            TAG=1.0
          fi

          IFS='.' read -r major minor <<< "$TAG"
          new_minor=$((minor + 1))
          NEW_TAG="${major}.${new_minor}"
          echo "New tag: $NEW_TAG"

          echo "imageName=$IMAGE_NAME:$NEW_TAG" >> $GITHUB_ENV
      
      - name: Increment image tag
        run: |
          IFS='.' read -r major minor patch <<< "${{env.CurrentTag}}"
          latest_commit_message="${{ github.event.head_commit.message }}"

          if [[ $commit_message == *"(#major)"* ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ $commit_message == *"(#minor)"* ]]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          NEW_TAG="${major}.${minor}.${patch}"
          echo "New tag: $NEW_TAG"

          echo "imageName=$IMAGE_NAME:$NEW_TAG" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.imageName }}